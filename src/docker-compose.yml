version: '3.4'

networks:
    backend:
        driver: bridge
services:
  identity.api:
    image: ${DOCKER_REGISTRY-}identityapi
    ports:
        - 5001:8080
    build:
      context: .
      dockerfile: Identity.API/Dockerfile
    container_name: identity.api
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__IdentityConnection=${IDENTITY_DB_CONNECTION_STRING}
        - CLOUDINARY_URL=${CLOUDINARY_URL}
        - Cloudinary__CloudName=${CLOUDINARY_CLOUDNAME}
        - Cloudinary__ApiKey=${CLOUDINARY_APIKEY}
        - Cloudinary__ApiSecret=${CLOUDINARY_SECRET}
        - jwt__secret=${JWT_SECRET}
        - EmailConfiguration__From=${EMAIL_SENDER}
        - EmailConfiguration__Username=${EMAIL_SENDER}
        - EmailConfiguration__Password=${SMTP_PASSWORD}
    env_file:
        - .env
    networks:
        - backend

  bookcatalog.api:
    image: ${DOCKER_REGISTRY-}bookcatalogapi
    container_name: bookcatalog.api
    ports:
        - 5002:8080
    build:
      context: .
      dockerfile: BookCatalog.API/Dockerfile
    depends_on:
        - identity.api
        - rabbitmq 
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__BookCatalog=${CATALOG_DB_CONNECTION_STRING}
        - jwt__secret=${JWT_SECRET}
    env_file:
        - .env
    networks:
        - backend

  basket.api:
    ports:
        - 5003:8080
    image: ${DOCKER_REGISTRY-}basketapi
    container_name: basket.api
    build:
      context: .
      dockerfile: Basket.API/Dockerfile
    depends_on:
        - identity.api
        - rabbitmq
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__Basket=${BASKET_CONNECTION_STRING}
        - ConnectionStrings__BasketPassword=${BASKET_CONNECTION_PASSWORD}
        - jwt__secret=${JWT_SECRET}
    env_file:
        - .env
    networks:
        - backend

  ordering.api:
    image: ${DOCKER_REGISTRY-}orderingapi
    container_name: ordering.api
    ports:
        - 5005:8080
    build:
        context: ..
        dockerfile: src/Ordering.API/Dockerfile
    environment:
        - ConnectionStrings__Ordering=${ORDER_CONNECTION_STRING}
        - jwt__secret=${JWT_SECRET}
        - StripeSettings__StripeAPIKey=${STRIPE_API_KEY}
        - StripeSettings__WebhookSecretKey=${WEBHOOK_SECRET_KEY}
    env_file:
        - .env
    networks:
        - backend
    depends_on:
        - rabbitmq
        - identity.api

  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    container_name: apigateway
    ports:
        - 6001:8080
        - 6002:8081
    build:
      context: ..
      dockerfile: src/APIGateway/Dockerfile
    networks:
        - backend
    volumes:
        - ~/.aspnet/https:/https:ro
    environment:
      - ASPNETCORE_HTTPS_PORTS=8081
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - ASPNETCORE_Kestrel__Certificates__Default__Password=Aoitome@123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aoitome.pfx 
  contentrecsys:
    image: ${DOCKER_REGISTRY-}contentrecsys
    container_name: contentrecsys
    ports:
        - 5004:8080
    build:
      context: ..\src\ContentRecSys
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
        - backend

  # chatbot:
  #   image: ${DOCKER_REGISTRY-}chat_bot
  #   container_name: chatbot
  #   ports:
  #       - 5007:8080
  #   build:
  #       context: ..\src\ChatbotAPI
  #       dockerfile: Dockerfile
  #   networks:
  #       - backend
 
  rabbitmq:
    image: rabbitmq:3-management-alpine
    networks:
        - backend

  stripe:
    image: stripe/stripe-cli:latest
    networks: 
        - backend
    command: "listen --api-key ${STRIPE_API_KEY} --device-name ${STRIPE_DEVICE_NAME} --forward-to ordering.api:8080/api/v1/payment-webhook"
    env_file:
        - .env
    ports:
        - 5006:8080


  
