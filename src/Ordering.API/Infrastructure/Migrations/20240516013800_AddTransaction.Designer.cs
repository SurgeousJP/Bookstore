// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ordering.API.Infrastructure;

#nullable disable

namespace Ordering.API.Migrations
{
    [DbContext(typeof(OrderContext))]
    [Migration("20240516013800_AddTransaction")]
    partial class AddTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_status", new[] { "default", "valid", "invalid", "expired" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_type", new[] { "aead-ietf", "aead-det", "hmacsha512", "hmacsha256", "auth", "shorthash", "generichash", "kdf", "secretbox", "secretstream", "stream_xchacha20" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgjwt");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgsodium", "pgsodium");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ordering.API.BuyerModel.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<string>("CardHoldername")
                        .HasColumnType("text")
                        .HasColumnName("card_holdername");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text")
                        .HasColumnName("card_number");

                    b.Property<long?>("CardTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_type_id");

                    b.Property<DateOnly?>("Expiration")
                        .HasColumnType("date")
                        .HasColumnName("expiration");

                    b.Property<string>("SecurityNumber")
                        .HasColumnType("text")
                        .HasColumnName("security_number");

                    b.HasKey("Id")
                        .HasName("payment_method_pkey");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CardTypeId");

                    b.ToTable("payment_method", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Ward")
                        .HasColumnType("text")
                        .HasColumnName("ward");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("address_pkey");

                    b.HasIndex("BuyerId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("buyer_pkey");

                    b.ToTable("buyer", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Cardtype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("cardtype_pkey");

                    b.ToTable("cardtype", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<long?>("OrderStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_status_id");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<float?>("TotalAmount")
                        .HasColumnType("real")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("order_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<float?>("OldUnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("old_unit_price");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<float?>("TotalUnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("total_unit_price");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("order_item_pkey");

                    b.HasIndex("OrderId");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("order_status_pkey");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("Ordering.API.BuyerModel.PaymentMethod", b =>
                {
                    b.HasOne("Ordering.API.Models.BuyerModel.Buyer", "Buyer")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("public_payment_method_buyer_id_fkey");

                    b.HasOne("Ordering.API.Models.BuyerModel.Cardtype", "CardType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CardTypeId")
                        .HasConstraintName("public_payment_method_card_type_id_fkey");

                    b.Navigation("Buyer");

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Address", b =>
                {
                    b.HasOne("Ordering.API.Models.BuyerModel.Buyer", "Buyer")
                        .WithMany("Addresses")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("address_buyer_id_fkey");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.Order", b =>
                {
                    b.HasOne("Ordering.API.Models.BuyerModel.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("public_order_address_id_fkey");

                    b.HasOne("Ordering.API.Models.BuyerModel.Buyer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("public_order_buyer_id_fkey");

                    b.HasOne("Ordering.API.Models.OrderModel.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("public_order_order_status_id_fkey");

                    b.HasOne("Ordering.API.BuyerModel.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("public_order_payment_method_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Buyer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.OrderItem", b =>
                {
                    b.HasOne("Ordering.API.Models.OrderModel.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("public_order_item_order_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ordering.API.BuyerModel.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Buyer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("Ordering.API.Models.BuyerModel.Cardtype", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Ordering.API.Models.OrderModel.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
