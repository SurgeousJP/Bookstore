version: 1
services:
  identity-api:
    type: web
    env: docker
    plan: free
    docker:
      dockerfilePath: Identity.API/Dockerfile
      context: .
    buildCommand: echo "Building Identity API..."
    startCommand: dotnet Identity.API.dll
    envVars:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__IdentityConnection: ${IDENTITY_DB_CONNECTION_STRING}
      CLOUDINARY_URL: ${CLOUDINARY_URL}
      Cloudinary__CloudName: ${CLOUDINARY_CLOUDNAME}
      Cloudinary__ApiKey: ${CLOUDINARY_APIKEY}
      Cloudinary__ApiSecret: ${CLOUDINARY_SECRET}
      jwt__secret: ${JWT_SECRET}
      EmailConfiguration__From: ${EMAIL_SENDER}
      EmailConfiguration__Username: ${EMAIL_SENDER}
      EmailConfiguration__Password: ${SMTP_PASSWORD}

  bookcatalog-api:
    type: web
    env: docker
    plan: free
    docker:
      dockerfilePath: BookCatalog.API/Dockerfile
      context: .
    buildCommand: echo "Building Book Catalog API..."
    startCommand: dotnet BookCatalog.API.dll
    envVars:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__BookCatalog: ${CATALOG_DB_CONNECTION_STRING}
      jwt__secret: ${JWT_SECRET}

  basket-api:
    type: web
    env: docker
    plan: free
    docker:
      dockerfilePath: Basket.API/Dockerfile
      context: .
    buildCommand: echo "Building Basket API..."
    startCommand: dotnet Basket.API.dll
    envVars:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Basket: ${BASKET_CONNECTION_STRING}
      ConnectionStrings__BasketPassword: ${BASKET_CONNECTION_PASSWORD}
      jwt__secret: ${JWT_SECRET}

  ordering-api:
    type: web
    env: docker
    plan: free
    docker:
      dockerfilePath: src/Ordering.API/Dockerfile
      context: ..
    buildCommand: echo "Building Ordering API..."
    startCommand: dotnet Ordering.API.dll
    envVars:
      ConnectionStrings__Ordering: ${ORDER_CONNECTION_STRING}
      jwt__secret: ${JWT_SECRET}
      StripeSettings__StripeAPIKey: ${STRIPE_API_KEY}
      StripeSettings__WebhookSecretKey: ${WEBHOOK_SECRET_KEY}

  api-gateway:
    type: web
    env: docker
    plan: free
    docker:
      dockerfilePath: src/APIGateway/Dockerfile
      context: ..
    buildCommand: echo "Building API Gateway..."
    startCommand: dotnet APIGateway.dll
    envVars:
      ASPNETCORE_HTTPS_PORTS: 8081
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:8081;http://+:8080
      ASPNETCORE_Kestrel__Certificates__Default__Password: Aoitome@123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aoitome.pfx

  # content-recommendation-system:
  #   type: web
  #   env: docker
  #   plan: free
  #   docker:
  #     dockerfilePath: Dockerfile
  #     context: ../src/ContentRecSys
  #   buildCommand: echo "Building Content Recommendation System..."
  #   startCommand: dotnet ContentRecSys.dll

  rabbitmq:
    type: redis
    plan: free
    docker:
      image: rabbitmq:3-management-alpine

  stripe:
    type: cron
    env: docker
    plan: free
    docker:
      image: stripe/stripe-cli:latest
    command: "listen --api-key ${STRIPE_API_KEY} --device-name ${STRIPE_DEVICE_NAME} --forward-to ordering-api:8080/api/v1/payment-webhook"
    envVars:
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_DEVICE_NAME: ${STRIPE_DEVICE_NAME}
